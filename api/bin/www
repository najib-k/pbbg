#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
//var sequelize = require('../config/db.config')
var debug = require('debug')('api:server');
var http = require('http');
const socketIo = require('socket.io');
const {Player} = require("../config/models/Player");
const {Channel} = require("../config/models/Channel");
const {Message} = require("../config/models/Message");


/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.API_LOCAL_PORT || '3000');

app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 *  socketIO setup
 */

io = socketIo(server, {
  cors: {
    origin: "*",
    methods: ["GET", "POST"]
  }
});

io.on('connection', (socket) => {
  console.log('new connection');
  socket.emit('connection', null);
  socket.on('channel-join', async function (data) {
    console.log("lol");
    console.log(data);
    let player = await Player.findOne( { where: { id: data.playerId } })
    let channels = await Channel.findAll();
    console.log(player.name + " joined channel : " + data.id);
    channels.forEach(c => {
      console.log(c.sockets);
      let sockets = JSON.parse(c.sockets).ids;
      console.log("list = " + sockets);
      if (c.id === data.id) {
        if (sockets.indexOf(socket.id) == (-1)) {
          sockets.push(socket.id);
          c.participants++;
          c.sockets = JSON.stringify({ids : sockets});
          c.save();
          io.emit('channel', c);
        }
      } else {
        let index = sockets.indexOf(socket.id);
        if (index != (-1)) {
          sockets.splice(index, 1);
          c.participants--;
          c.sockets = JSON.stringify({ids : sockets});
          c.save();
          io.emit('channel', c);
        }
      }
    });

    return data.id;
  })
  socket.on('message-received', async function (data) {
    let sender = await Player.findOne({where: {id: data.player}});
    let channel = await Channel.findOne({where: { id: data.channelId }});
    let message = await Message.create({
      text: data.message,
      sender: sender.id,
      channel: channel.id,
      createdAt: data.date
    });
    io.emit('message', message);
  });
});


/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  console.log('Listening on ' + bind);
}

